worker_processes  1;
worker_rlimit_nofile 1024;
error_log logs/error.log info;
events {
    worker_connections 1024;
}
http {
    lua_package_path '/Applications/ZeroBraneStudio.app/Contents/ZeroBraneStudio/lualibs/?/?.lua;/Applications/ZeroBraneStudio.app/Contents/ZeroBraneStudio/lualibs/?.lua;$prefix/lua/?.lua;/usr/local/Cellar/openresty/1.13.6.1/lualib/?.lua;;';
    #lua_code_cache off;
lua_package_cpath '/Applications/ZeroBraneStudio.app/Contents/ZeroBraneStudio/bin/clibs/?.dylib;;';

    lua_shared_dict my_cache 50m;
    lua_shared_dict my_limit_req_store 100m;
    lua_shared_dict my_limit_conn_store 100m;
    lua_shared_dict redis_cluster_slot_locks 100k;
    lua_shared_dict process_events 1m;
    lua_shared_dict healthchecks 1m;

    upstream md5_server{
        server 127.0.0.1:8081;
        keepalive 20;
    }

    init_worker_by_lua_file lua/init_worker.lua;

    server {
        listen 8000;
        server_name localhost;

        location = /hello {
            default_type text/html;
            content_by_lua '
                ngx.say("<p>hello, world</p>")
            ';
        }

        location = /test_limit {
          access_by_lua_file lua/test_limit_traffic_pre.lua;
          content_by_lua 'ngx.sleep(5) ngx.say("test limit : ",ngx.now())';
          log_by_lua_file lua/test_limit_traffic_post.lua;
        }

        location ~ /test_(.+) {
          content_by_lua_file lua/test_$1.lua;
        }

        location = /sum {
            internal;
            content_by_lua '
              ngx.sleep(0.1)
              local args = ngx.req.get_uri_args()
              ngx.say(tonumber(args.a) + tonumber(args.b))
            ';
        }
        location = /subduction {
            internal;
            content_by_lua '
              ngx.sleep(0.1)
              local args = ngx.req.get_uri_args()
              ngx.say(tonumber(args.a) - tonumber(args.b))
            ';
        }
        location = /app/test {
            content_by_lua '
              local res = ngx.location.capture("/sum",{args={a=3,b=8}})
              ngx.say("status:",res.status," response:",res.body)
            ';
        }
        location = /app/test_parallels {
            content_by_lua '
              local start_time = ngx.now()
              local res1,res2 = ngx.location.capture_multi({
                {"/sum",{args={a=3,b=8}}},
                {"/subduction",{args={a=3,b=8}}}
              })
              ngx.say("status:",res1.status," response:",res1.body)
              ngx.say("status:",res2.status," response:",res2.body)
              ngx.say("time used:",ngx.now() - start_time)
            ';
        }
        location = /app/test_queue {
            content_by_lua '
              local start_time = ngx.now()
              local res1 = ngx.location.capture_multi({
                {"/sum",{args={a=3,b=8}}}
              })
              local res2 = ngx.location.capture_multi({
                {"/subduction",{args={a=3,b=8}}}
              })
              ngx.say("status:",res1.status," response:",res1.body)
              ngx.say("status:",res2.status," response:",res2.body)
              ngx.say("time used:",ngx.now() - start_time)
            ';
        }

        location ~ ^/static/([-_a-zA-Z0-9/]+).html {
            set $image_name $1;
            content_by_lua '
                ngx.exec("/download_internal/images/"..ngx.var.image_name..".html");
            ';
        }
        location /download_internal {
            internal;
            alias ../download;
        }

        location = / {
            rewrite_by_lua '
                return ngx.redirect("/foo");
            ';
        }
        location = /foo {
            content_by_lua '
                ngx.say([[I am foo]])
            ';
        }

        location /print_param {
            content_by_lua '
                local arg = ngx.req.get_uri_args()
                for k,v in pairs(arg) do
                  ngx.say("[GET ] key:",k," v:",v)
                end

                ngx.req.read_body()
                local arg = ngx.req.get_post_args()
                for k,v in pairs(arg) do
                  ngx.say("[POST] key:",k," v:",v)
                end
            ';
        }
        location /test {
            content_by_lua '
                local arg = ngx.req.get_uri_args()
                local res = ngx.location.capture("/print_param",{
                  method = ngx.HTTP_POST,
                  args = ngx.encode_args(arg),
                  body = ngx.encode_args({c=3,d="4&"})
                })
                ngx.say(res.body)
            ';
        }

        #lua_need_request_body on;
        location /test_body {
            content_by_lua '
                function getFile(file_name)
                  local f = assert(io.open(file_name,"r"))
                  local string = f:read("*all")
                  f:close()
                  return string
                end

                ngx.req.read_body()
                local data = ngx.req.get_body_data()
                if nil == data then
                  local file_name = ngx.req.get_body_file()
                  ngx.say(">> temp file: ",file_name)
                  if file_name then
                    data = getFile(file_name)
                  end
                end
                ngx.say("hello ",data)
            ';
        }

        location /test_flush {
            content_by_lua '
                ngx.say(string.rep("hello",1000))
                ngx.sleep(3)
                ngx.say("world")
            ';
        }
        location /test_flush2 {
            content_by_lua '
                ngx.say("hello")
                ngx.flush()
                ngx.sleep(3)
                ngx.say("world")
            ';
        }

        #dd if=/dev/zero of=data.db bs=1m count=1000
        location /test_chunk {
            access_by_lua '
                ngx.var.limit_rate = 1000
            ';
            content_by_lua '
                local file,err = io.open(ngx.config.prefix().."data.db","r")
                if not file then
                  ngx.log(ngx.ERR,"open file error:",err)
                  ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end

                local data
                while true do
                  data = file:read(1024)
                  if nil == data then
                    break
                  end
                  ngx.print(data)
                  ngx.flush(true)
                end
                file:close()
            ';
        }
        location /test_table {
            content_by_lua '
                ngx.log(ngx.INFO,"info")
                ngx.log(ngx.ERR,"error")
                local table = {"hello",{"world",true},{"!",nil}}
                ngx.print(table)
            ';
        }

        location ~ ^/api/([-_a-zA-Z0-9/]+) {
          access_by_lua_file lua/access_check.lua;
          content_by_lua_file lua/$1.lua;
        }

        location /test_context {
          rewrite_by_lua '
              ngx.ctx.foo = 76
          ';
          access_by_lua '
              ngx.ctx.foo = ngx.ctx.foo + 3
          ';
          content_by_lua '
              ngx.say("main pre:",ngx.ctx.foo)
              local res = ngx.location.capture("/test_context_sub")
              ngx.print(res.body)
              ngx.say("main post:",ngx.ctx.foo)
          ';
        }

        location /test_context_sub {
          content_by_lua '
              ngx.say("sub pre:",ngx.ctx.foo)
              ngx.ctx.foo = 32
              ngx.say("sub post:",ngx.ctx.foo)
          ';
        }

        location /test_http {
          content_by_lua_block {
            ngx.req.read_body()
            local args, err = ngx.req.get_uri_args()
            local res = ngx.location.capture('/test_md5',
                {
                    method = ngx.HTTP_POST,
                    body = args.data
                }
            )

            if 200 ~= res.status then
                ngx.exit(res.status)
            end

            if args.key == res.body then
                ngx.say("valid request")
            else
                ngx.say("invalid request")
            end
          }
        }
        location /test_md5 {
          proxy_pass http://md5_server;
          proxy_http_version 1.1;
          proxy_set_header Connection "";
        }

        location /test_http_new {
          content_by_lua_block {
              ngx.req.read_body()
              local args, err = ngx.req.get_uri_args()
              local data = ngx.req.get_body_data()
              local http = require "resty.http"
              local httpc = http.new()
              local res, err = httpc:request_uri(
                  "http://127.0.0.1:8081/test_md5",
                      {
                      method = "POST",
                      body = data
                    }
              )

              if 200 ~= res.status then
                  ngx.exit(res.status)
              end

              if args.key == res.body then
                  ngx.say("valid request")
              else
                  ngx.say("invalid request")
              end
          }
        }


        #ab -c 10 -n 20 http://127.0.0.1:8080/test_sleep 761.01rps Vs 82.88rps
        location /test_sleep {
          content_by_lua '
              ngx.sleep(0.01)
              ngx.say("ok")
          ';
        }
        location /test_sleep_2 {
          content_by_lua '
              os.execute("sleep "..0.01)
              ngx.say("ok")
          ';
        }

        #wrk --timeout 10s -t 1 -c 1 -d 1s http://localhost:8080/index
        #wrk --timeout 10s -t 2 -c 2 -d 1s http://localhost:8080/index 关闭lua_code_cache才会出错
        location /index {
          content_by_lua_file lua/web/index.lua;
        }

        location /test_multi_ret {
          content_by_lua_block {
            function func1()
              return nil,'error1'
            end

            function func2()
              return nil,'error2'
            end

            local ok,err = func1()
            ngx.log(ngx.ERR,"ret:",ok,err)
            if not ok then
              ok,err = func2()
              ngx.log(ngx.ERR,"ret:",ok,err)
            end
            ngx.log(ngx.ERR,"ret:",ok,err)
          }
        }

        location /test_cosocket {
          resolver 114.114.114.114;
          content_by_lua_file lua/test_cosocket.lua;
        }
    }

    server {
      listen    8081;
      server_name localhost;

      location /test_md5 {
        default_type text/html;
        content_by_lua_file lua/test_md5.lua;
      }
    }
}
